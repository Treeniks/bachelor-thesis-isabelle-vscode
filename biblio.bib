@article{korselt1911,
    title = {Über einen Beweis des Äquivalenssatzes. (Mit 1 Figur im Text)},
    author = {Alwin Korselt},
    journal = {Mathematische Annalen},
    pages = {294--296},
    url = {http://eudml.org/doc/158498},
    volume = {70},
    date = {1911},
}

@incollection{schroder1898,
    title = {Über zwei Definitionen der Endlichkeit und G. Cantor'sche Sätze},
    author = {Ernst Schröder},
    booktitle = {Abhandlungen der Kaiserlichen Leopoldinisch-Carolinischen Deutschen Akademie der Naturforscher},
    publisher = {Ehrhardt Karras in Halle a. S.},
    editor = {Kaiserlich Leopoldinisch-Carolinische Deutsche Akademie der Naturforscher},
    volume = {71},
    date = {1898},
    pages = {303--362},
    url = {https://www.biodiversitylibrary.org/item/45265},
}

@inbook{dedekind1887,
    title = {Ähnliche (deutliche) Abbildung und ähnliche Systeme},
    booktitle = {Gesammelte mathematische Werke},
    author = {Richard Dedekind},
    editor = {Robert Fricke and Emmy Noether and Øystein Ore},
    volume = {3},
    publisher = {Friedr. Vieweg & Sohn Akt.-Ges.},
    date = {1887},
    pages = {447--449},
    url = {http://resolver.sub.uni-goettingen.de/purl?PPN23569441X},
}

% technically putting the version into the title
% and having an author is incorrect here
% but otherwise the reference is just not used correctly...
@online{lsp-spec,
    title = {Language Server Protocol Specification - 3.17},
    author = {Microsoft},
    date = {2022},
    url = {https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/},
    urldate = {2024-08-01},

    version = {3.17},
    organization = {Microsoft},
}

@online{extension-api,
    title = {Visual Studio Code Extension API},
    author = {Microsoft},
    url = {https://code.visualstudio.com/api},
    urldate = {2024-08-01},
    organization = {Microsoft},
}


@manual{manual-isar-ref,
    title = {The Isabelle/Isar Reference Manual},
    author = {Makarius Wenzel},
    date = {2024-05-23},
    url = {https://isabelle.in.tum.de/doc/isar-ref.pdf},
}

@manual{manual-jedit,
    title = {Isabelle/jEdit},
    author = {Makarius Wenzel},
    date = {2024-05-23},
    abstract = {Isabelle/jEdit is a fully-featured Prover IDE, based on Isabelle/Scala and the jEdit text editor. This document provides an overview of general principles and its main IDE functionality.},
    url = {https://isabelle.in.tum.de/doc/jedit.pdf},
}

@manual{manual-system,
    title = {The Isabelle System Manual},
    author = {Makarius Wenzel},
    date = {2024-05-23},
    url = {https://isabelle.in.tum.de/dist/Isabelle2024/doc/system.pdf},
}

@manual{manual-implementation,
    title = {The Isabelle/Isar Implementation},
    author = {Makarius Wenzel},
    date = {2024-05-23},
    abstract = {We describe the key concepts underlying the Isabelle/Isar implementation, including ML references for the most important functions. The aim is to give some insight into the overall system architecture, and provide clues on implementing applications within this framework.},
    url = {https://isabelle.in.tum.de/doc/implementation.pdf},
}

@thesis{denis-paluca,
    type = {bathesis},
    title = {Isabelle/VSCode: Editor Improvements and Prover IDE integrations},
    author = {Denis Paluca},
    date = {2021-08-15},
    abstract = {In the past few years, Visual Studio Code has risen tremendously in popularity. Therefore, many development tools and programming languages seek to provide extensions for it. For the interactive theorem prover Isabelle, an extension has already been introduced. But, this extension is still not on par with Isabelle/jEdit, the default choice for users when it comes to working with Isabelle. This is due to issues with mathematical symbols, input methods, and partially missing markup. In this thesis, we improved Isabelle/VSCode by reworking it to mend the above-mentioned issues. To do this, we implemented a new file system for the extension, added support for abbreviations and auto-completion, and added syntax highlighting for panels. Evaluation of the extension before and after the changes shows clearly that performance has been improved. Now, users do not have to wait 20 seconds everytime they open a new theory file. Based on this, the extension has been brought closer to being a valid alternative to Isabelle/jEdit.},
    url = {https://www21.in.tum.de/students/past/vscode_plugin_improvements/assets/Isabelle_VSCode_Thesis.pdf},
}

@techreport{markarius-isabelle-vscode-2017,
    title = {Isabelle/VSCode in January 2017},
    author = {Makarius Wenzel},
    date = {2017-01-26},
    abstract = {This is a report on the results of working with Visual Studio Code over some weeks, in order to connect it to the Isabelle/PIDE infrastructure via the Language Server Protocol. This newly emerging editor by Microsoft (for all platforms and all users) is a nice basis for semantic processing of proof documents, but more work is required to approach the sophistication of the established Isabelle/jEdit front-end.},
    url = {https://sketis.net/wp-content/uploads/2017/01/isabelle-vscode-jan-2017.pdf},
}

@article{accessibility-vscode,
    title = {Towards an Accessible Mathematics Working Environment Based on Isabelle/VSCode},
    volume = {375},
    issn = {2075-2180},
    url = {http://dx.doi.org/10.4204/EPTCS.375.8},
    doi = {10.4204/eptcs.375.8},
    journal = {Electronic Proceedings in Theoretical Computer Science},
    publisher = {Open Publishing Association},
    author = {Miesenberger, Klaus and Neuper, Walther and Stöger, Bernhard and Wenzel, Makarius},
    date = {2023-03-10},
    pages = {92--111},
}

@misc{paulson-next-700,
    title = {Isabelle: The Next 700 Theorem Provers},
    author = {Lawrence C. Paulson},
    date = {2000-10-31},
    eprint = {cs/9301106},
    archiveprefix = {arXiv},
    primaryclass = {cs.LO},
    url = {https://arxiv.org/abs/cs/9301106},
}

@article{paulson-natural-deduction,
    title = {Natural deduction as higher-order resolution},
    author = {Lawrence C. Paulson},
    journal = {The Journal of Logic Programming},
    volume = {3},
    number = {3},
    pages = {237--258},
    date = {1986},
    issn = {0743-1066},
    doi = {https://doi.org/10.1016/0743-1066(86)90015-4},
    abstract = {An interactive theorem prover, Isabelle, is under development. In lcf, each inference rule is represented by one function for forwards proof and another (a tactic) for backwards proof. In Isabelle, each inference rule is represented by a Horn clause. Resolution gives both forwards and backwards proof, supporting a large class of logics. Isabelle has been used to prove theorems in Martin-Löf's constructive type theory. Quantifiers pose several difficulties: substitution, bound variables, Skolemization. Isabelle's representation of logical syntax is the typed λ-calculus, requiring higher-order unification. It may have potential for logic programming. Depth-first subgoaling along inference rules constitutes a higher-order PROLOG.},
    url = {https://www.sciencedirect.com/science/article/pii/0743106686900154},
}

@article{paulson-foundations-generic-theorem-prover,
    title = {The foundation of a generic theorem prover},
    author = {Paulson, Lawrence C.},
    journal = {Journal of Automated Reasoning},
    date = {1989-09-01},
    volume = {5},
    number = {3},
    pages = {363--397},
    issn = {1573-0670},
    doi = {10.1007/BF00248324},
    abstract={Isabelle [28, 30] is an interactive theorem prover that supports a variety of logics. It represents rules as propositions (not as functions) and builds proofs by combining rules. These operations constitute a meta-logic (or `logical framework') in which the object-logics are formalized. Isabelle is now based on higher-order logic-a precise and well-understood foundation.},
    url = {https://doi.org/10.1007/BF00248324},
}

@book{paulson-isabelle-generic-theorem-prover,
    title = {Isabelle: A Generic Theorem Prover},
    editor = {Lawrence C. Paulson},
    date = {1994},
    publisher = {Springer Berlin Heidelberg},
    doi = {10.1007/BFb0030541},
    isbn = {978-3-540-48586-5},
    url = {https://doi.org/10.1007/BFb0030541},
}

@article{lcf-to-isabelle,
    author = {Paulson, Lawrence C. and Nipkow, Tobias and Wenzel, Makarius},
    title = {From LCF to Isabelle/HOL},
    date = {2019-12-01},
    issue_date = {Dec 2019},
    publisher = {Springer-Verlag},
    address = {Berlin, Heidelberg},
    volume = {31},
    number = {6},
    issn = {0934-5043},
    url = {https://doi.org/10.1007/s00165-019-00492-1},
    doi = {10.1007/s00165-019-00492-1},
    abstract = {Interactive theorem provers have developed dramatically over the past four decades, from primitive beginnings to today’s powerful systems. Here, we focus on Isabelle/HOL and its distinctive strengths. They include automatic proof search, borrowing techniques from the world of first order theorem proving, but also the automatic search for counterexamples. They include a highly readable structured language of proofs and a unique interactive development environment for editing live proof documents. Everything rests on the foundation conceived by Robin Milner for Edinburgh LCF: a proof kernel, using abstract types to ensure soundness and eliminate the need to store proofs. Compared with the research prototypes of the 1970s, Isabelle is a practical and versatile tool. It is used by system designers, mathematicians and many others.},
    journal = {Form. Asp. Comput.},
    pages = {675--698},
    numpages = {24},
    keywords = {Interactive theorem proving, Isabelle, HOL, LCF},
}

@inproceedings{isabelle-framework,
    author = {Wenzel, Makarius and Paulson, Lawrence C. and Nipkow, Tobias},
    editor = {Mohamed, Otmane Ait and Mu{\~{n}}oz, C{\'e}sar and Tahar, Sofi{\`e}ne},
    title = {The Isabelle Framework},
    booktitle = {Theorem Proving in Higher Order Logics},
    date = {2008},
    publisher = {Springer Berlin Heidelberg},
    address = {Berlin, Heidelberg},
    pages = {33--38},
    abstract = {Isabelle, which is available from http://isabelle.in.tum.de, is a generic framework for interactive theorem proving. The Isabelle/Pure meta-logic allows the formalization of the syntax and inference rules of a broad range of object-logics following the general idea of natural deduction [32,33]. The logical core is implemented according to the well-known ``LCF approach'' of secure inferences as abstract datatype constructors in ML [16]; explicit proof terms are also available [8]. Isabelle/Isar provides sophisticated extra-logical infrastructure supporting structured proofs and specifications, including concepts for modular theory development. Isabelle/HOL is a large application within the generic framework, with plenty of logic-specific add-on tools and a large theory library. Other notable object-logics are Isabelle/ZF (Zermelo-Fraenkel set-theory, see [34,36] and Isabelle/HOLCF [26] (Scott's domain theory within HOL). Users can build further formal-methods tools on top, e.g. see [53].},
    isbn = {978-3-540-71067-7},
}

@inproceedings{lean4-system,
    author = {Moura, Leonardo de and Ullrich, Sebastian},
    editor = {Platzer, Andr{\'e} and Sutcliffe, Geoff},
    title = {The Lean 4 Theorem Prover and Programming Language},
    booktitle = {Automated Deduction -- CADE 28},
    year = {2021},
    publisher = {Springer International Publishing},
    address = {Cham},
    pages = {625--635},
    url = {https://lean-lang.org/papers/lean4.pdf},
    abstract = {Lean 4 is a reimplementation of the Lean interactive theorem prover (ITP) in Lean itself. It addresses many shortcomings of the previous versions and contains many new features. Lean 4 is fully extensible: users can modify and extend the parser, elaborator, tactics, decision procedures, pretty printer, and code generator. The new system has a hygienic macro system custom-built for ITPs. It contains a new typeclass resolution procedure based on tabled resolution, addressing significant performance problems reported by the growing user base. Lean 4 is also an efficient functional programming language based on a novel programming paradigm called functional but in-place. Efficient code generation is crucial for Lean users because many write custom proof automation procedures in Lean itself.},
    isbn = {978-3-030-79876-5}
}

@article{lsp-spec-extension,
    title = {The Specification Language Server Protocol: A Proposal for Standardised LSP Extensions},
    volume = {338},
    issn = {2075-2180},
    url = {http://dx.doi.org/10.4204/EPTCS.338.3},
    doi = {10.4204/eptcs.338.3},
    journal = {Electronic Proceedings in Theoretical Computer Science},
    publisher = {Open Publishing Association},
    author = {Kjær Rask, Jonas and Palludan Madsen, Frederik and Battle, Nick and Daniel Macedo, Hugo and Gorm Larsen, Peter},
    date = {2021-08-06},
    pages = {3--18},
}

@inproceedings{afp-redesign,
    author = {MacKenzie, Carlin and Huch, Fabian and Vaughan, James and Fleuriot, Jacques},
    editor = {Buzzard, Kevin and Kutsia, Temur},
    title = {Re-imagining the Isabelle Archive of Formal Proofs},
    booktitle = {Intelligent Computer Mathematics},
    date = {2022},
    publisher = {Springer International Publishing},
    address = {Cham},
    pages = {162--167},
    abstract = {Since its inception in 2004 the Archive of Formal Proofs has grown in size but its interface and functionality have only been minimally improved. To transform the AFP into a more user-friendly and effective resource, we redesigned the website to meet modern web standards and practices. We ensure that our work is community-driven by basing the redesign on results from a survey of the Isabelle community. The site generation uses Hugo and is implemented as a proper Isabelle component, which also allows us to adapt the AFP metadata model to avoid inconsistencies in the future. Notable improvements include a responsive design, new theory browsing interface, integrated search, and enhanced navigation.},
    isbn = {978-3-031-16681-5},
}

@misc{prime-number-theorem,
    title = {A formally verified proof of the prime number theorem},
    author = {Jeremy Avigad and Kevin Donnelly and David Gray and Paul Raff},
    date = {2006-01-19},
    eprint = {cs/0509025},
    archivePrefix = {arXiv},
    primaryClass = {cs.AI},
    url = {https://arxiv.org/abs/cs/0509025},
}

@inproceedings{verified-microkernel,
    title = {Formalising a High-Performance Microkernel},
    author = {Kevin Elphinstone and Gerwin Klein and Rafal Kolanski},
    booktitle = {Verified Software: Theories, Tools and Experiments},
    address = {Seattle, USA},
    editor = {Rustan Leino},
    date = {2006-08},
    pages = {1--7},
    paperurl = {https://trustworthy.systems/publications/papers/Elphinstone_KK_06.pdf},
    series = {Microsoft Research Technical Report MSR-TR-2006-117},
}

@article{jinja,
    author = {Klein, Gerwin and Nipkow, Tobias},
    title = {A machine-checked model for a Java-like language, virtual machine, and compiler},
    date = {2006-07-01},
    issue_date = {July 2006},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {28},
    number = {4},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/1146809.1146811},
    doi = {10.1145/1146809.1146811},
    abstract = {We introduce Jinja, a Java-like programming language with a formal semantics designed to exhibit core features of the Java language architecture. Jinja is a compromise between the realism of the language and the tractability and clarity of its formal semantics. The following aspects are formalised: a big and a small step operational semantics for Jinja and a proof of their equivalence, a type system and a definite initialisation analysis, a type safety proof of the small step semantics, a virtual machine (JVM), its operational semantics and its type system, a type safety proof for the JVM; a bytecode verifier, that is, a data flow analyser for the JVM, a correctness proof of the bytecode verifier with respect to the type system, and a compiler and a proof that it preserves semantics and well-typedness. The emphasis of this work is not on particular language features but on providing a unified model of the source language, the virtual machine, and the compiler. The whole development has been carried out in the theorem prover Isabelle/HOL.},
    journal = {ACM Trans. Program. Lang. Syst.},
    pages = {619--695},
    numpages = {77},
    keywords = {Java, operational semantics, theorem proving},
}

@online{font-email,
  title = {[isabelle-dev] NEWS: Isabelle DejaVu fonts},
  author = {Makarius Wenzel},
  date = {2018-11-24},
  url = {https://mailman46.in.tum.de/pipermail/isabelle-dev/2018-November/008132.html}
}
